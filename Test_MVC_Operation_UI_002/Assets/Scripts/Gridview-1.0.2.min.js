/****************************
 * Title - Dynamically Table Bind
 * Description - Bind table with JSON value
 * Author - Jayanta Rakshit
 * Copyright - (c) 2018
 * Version - 1.0.1
 * Licence - Nil
 ****************************/
!function (w) { var a = function (t, e, a) { this.obj = w(t), this.isTable = this.obj.is("table"), this.table = this.isTable ? w(t) : w(h.table), this.tableHeadDataExists = !!this.table.children("thead").children("tr").children("th").length, this.isAutoColumn = !("autocolumn" in a) || a.autocolumn, this.isRowMerge = "rowmerge" in a && a.rowmerge, this.ExtraColumn = "column" in a ? a.column : [], this.Columns = ("object" != typeof e || this.isTable, this.getColumnNameList(e, a)), this.thead = this.isTable ? this.tableHead(this.table.children("thead")) : this.tableHead(h.head), this.tbody = this.isTable ? this.tableBodyGenerate(this.table.children("tbody"), e, a) : this.tableBodyGenerate(h.body, e, a), this.tfoot = this.isTable ? this.table.children("tfoot") : "", this.show(a) }; a.prototype = { getColumnNameList: function (t, e) { var h = [], a = e.column; return null !== t && (this.isAutoColumn ? (h = Object.keys(t[0]), Object.keys(e.column).length && w.each(a, function (t, e) { var a = "name" in e ? e.name : "", n = "place" in e ? e.place : ""; if ("last" === n.toLowerCase().trim()) h.length && h.push(a); else if ("first" === n.toLowerCase().trim()) { if (h.length) { var i = h; h = []; for (var r = -1; r < i.length; r++) 0 <= r ? h.push(i[r]) : h.push(a) } } else h.length && h.push(a) })) : (h = [], w.each(a, function (t, e) { var a = "name" in e ? e.name : ""; h.push(a) }))), h }, tableHeadGenerate: function (t) { if (this.Columns.length) { var e = w(t), n = w("<tr></tr>"); w(this.Columns).each(function (t, e) { var a = w("<th></th>"); a.html(e), n.append(a) }), e.append(n) } return e }, tableHead: function (t) { if (this.isTable) { var a = 0 < w(t).length ? w(t) : w(h.head); if (0 < a.length) { var e = null; if (0 < a.children("tr").length && (e = a.children("tr")), null === e) return this.tableHeadGenerate(a); var i = this.Columns; return a.empty(), w(e).each(function (t, e) { var n = w(this); w(i).each(function (t, e) { var a = w("<th></th>").text(e); n.append(a) }), a.append(n) }), a } return this.tableHeadGenerate(a) } return this.tableHeadGenerate(t) }, tableBodyGenerate: function (t, e, a) { var n = 0 < w(t).length ? w(t) : w(h.body), i = this.ExtraColumn, r = this.isAutoColumn; this.isTable && n.empty(); var l = this.Columns; return w.each(e, function (t, p) { var h = w("<tr></tr>"); r ? w.each(l, function (t, g) { var v = w("<td></td>"); p[g] ? v.html(p[g]) : w.each(i, function (t, e) { var a = "name" in e ? e.name : "", n = "value" in e ? e.value : "", i = "dbcol" in e ? p[e.dbcol] : "", r = "data" in g ? g.data : {}; if (a.toLowerCase().trim() === g.toLowerCase().trim()) { var h = w(n); if (h.isFormTag()) h.val(i), v.html(h); else if (h.isAnchorTag()) { var l = ""; if (h.hasAttr("href") && (l = h.attr("href")).length > window.location.origin.length) { var o = l.indexesOf("{"), s = l.indexesOf("}"), d = []; if (o.length !== s.length) throw "'href' value shoud be valid format"; for (var u = 0; u < o.length; u++) { var c = o[u], f = s[u]; 0 < c && 0 < f && d.push(l.slice(c + 1, f).trim()) } if (0 < d.length) { for (u = 0; u < d.length; u++) { var b = new RegExp("{" + d[u] + "}", "g"); l = l.replace(b, p[d[u]]) } h.attr("href", l) } else h.attr("href", l); var m = Object.keys(r); 0 < m.length && w.each(m, function (t, e) { h.attr("data-" + e, p[r[e]]) }) } v.html(h) } else if (h.isHtmlTag()) { l = ""; w.each(h, function () { var a = w(this); a.html(i); var t = Object.keys(r); 0 < t.length && w.each(t, function (t, e) { a.attr("data-" + e, p[r[e]]) }) }), v.html(h) } else v.html(i) } }), h.append(v) }) : w.each(i, function (t, e) { var a = w("<td></td>"), n = ("name" in e && e.name, "value" in e ? e.value : ""), i = "dbcol" in e ? p[e.dbcol] : "", d = "data" in e ? e.data : {}, u = w(n); if (u.isFormTag()) { var r = Object.keys(d); 0 < r.length && w.each(r, function (t, e) { u.attr("data-" + e, p[d[e]]) }), u.val(i), a.html(u) } else if (u.isAnchorTag()) { w.each(u, function () { var t = w(this); if (t.hasAttr("href")) { if ((o = t.attr("href")).length > window.location.origin.length) { var e = o.indexesOf("{"), a = o.indexesOf("}"), n = []; if (e.length !== a.length) throw "'href' value shoud be valid format"; for (var i = 0; i < e.length; i++) { var r = e[i], h = a[i]; 0 < r && 0 < h && n.push(o.slice(r + 1, h).trim()) } if (0 < n.length) { for (i = 0; i < n.length; i++) var l = new RegExp("{" + n[i] + "}", "g"), o = o.replace(l, p[n[i]]); t.attr("href", o) } else t.attr("href", o) } var s = Object.keys(d); 0 < s.length && w.each(s, function (t, e) { u.attr("data-" + e, p[d[e]]) }) } }), a.html(u) } else if (u.isHtmlTag()) { w.each(u, function () { var a = w(this); a.html(i); var t = Object.keys(d); 0 < t.length && w.each(t, function (t, e) { a.attr("data-" + e, p[d[e]]) }) }), a.html(u) } else a.html(i); h.append(a) }), a.onrowbound(h), a.onrowbound(t, h), n.append(h) }), n }, show: function (t) { var e = this.isTable ? this.table : w("<table></table>"); t.id = this.isTable ? this.table.attr("id") : t.id, e.addClass(t.class), e.attr("id", t.id), e.append(this.thead), e.append(this.tbody), e.append(this.tfoot), this.isRowMerge && this.rowMerge(), this.isTable || this.obj.html(e) }, rowMerge: function (t) { var e = this.tbody.children("tr"); for (index = e.length - 2; 0 <= index; index--) { var a = e.eq(index + 1), n = e.eq(index), r = a.children("td"), h = n.children("td"); for (i = 0; i < h.length; i++) { var l = w(r[i]), o = w(h[i]); if (o.text().replace(/\ /g, "") === l.text().replace(/\ /g, "")) { var s = w(l).hasAttr("rowspan") ? l.attr("rowspan") : 1; s = parseInt(s) + 1, o.attr("rowspan", s), l.remove() } } } } }, w.fn.Gridview = function (t, e) { return this.each(function () { new a(this, t, new n(e)) }) }, w.fn.Gridview.Constructor = a, w.fn.Gridview.Default = {}, w.fn.hasAttr = function (t) { if (this.attr) var e = this.attr(t); else e = this.getAttribute(t); return void 0 !== e && !1 !== e && null !== e }, w.fn.isFormTag = function (t) { var e; if ((e = isNaN(t) ? w(this) : w(t)).length) { var a = e.prop("tagName").toLowerCase().trim(); return -1 != w.inArray(a, ["input", "select", "button", "label"]) } return !1 }, w.fn.isAnchorTag = function (t) { var e; if ((e = isNaN(t) ? w(this) : w(t)).length) { var a = e.prop("tagName").toLowerCase().trim(); return -1 != w.inArray(a, ["a"]) } return !1 }, w.fn.isHtmlTag = function (t) { var e; if ((e = isNaN(t) ? w(this) : w(t)).length) { var a = e.prop("tagName").toLowerCase().trim(); return -1 != w.inArray(a, ["span"]) } return !1 }, String.prototype.indexesOf = function (t) { for (var e = [], a = 0; a < this.length; a++) this[a] === t.trim() && e.push(a); return e }; var h = { main: "", table: "<table></table>", head: "<thead></thead>", body: "<tbody></tbody>", foot: "<tfoot></tfoot>", tr: "<tr></tr>", th: "<th></th>", td: "<td></td>" }, n = function (t) { return w.extend({ dbcols: [], column: [], data: {}, class: "table table-responsive table-bordered", id: "tableGrid", rowmerge: !1, autocolumn: !0, onrowbound: function (t, e) { }, onrowbound: function (t) { } }, t) } }(jQuery);